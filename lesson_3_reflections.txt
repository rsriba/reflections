When would you want to use a remote repository rather than keeping all your work
local?

    When more than one person is working on a project using a remote respository
    helps in collaborating easily.
    Similarly when working from multiple systems and also serves as a good backup
    option.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Because the user might not have finished working on the file and might not
    prefer to update the remote repository until completely sure. Same goes in the
    case of experimental changes made to a file, the user might want to pull files
    from the remote repository when there is any failures and wants to restore the
    files. So pullig changes manually ensures there is a backup in case it is required.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Branches occur on a single repository.
    Cloning is taking one repository and making one just like it. The original
    repository might be on the computer and be cloned in another spot or the
    original repository might aslo be a remote.
    Forking is similar to cloning but occurs only on GitHub. GitHub provides a way
    to keep track of all the forks made from a repository and is helpful when the
    original needs to kept unchanged. It also helps to suggest any changes made to
    the user with the original version.

What is the benefit of having a copy of the last known state of the remote
stored locally?

    It makes merging easier and also serves as a reference for easy conflict resolution.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Cloud service. Auto saving would make it easier but at the same time might not want to save in case of experimental changes and bug fixing and going back to a specific version would be hard.

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    When collaborating with others might want to get feedback before changing master.
    Separate branch approach ensures everyone working on a project stay up to date with changes, also serves as a means to make experimental changes without affecting master.
    Master branch approach makes it so much easier when merging.
